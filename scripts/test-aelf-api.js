// Test direct de l'API AELF pour voir sa structure r√©elle

async function testAelfAPI() {
  const today = new Date().toISOString().split("T")[0]
  console.log("Test de l'API AELF pour la date:", today)

  // URLs possibles √† tester
  const urls = [
    `https://api.aelf.org/v1/messes/${today}/france`,
    `https://api.aelf.org/v1/messes/${today}`,
    `https://api.aelf.org/messes/${today}/france`,
    `https://api.aelf.org/messes/${today}`,
    `https://www.aelf.org/api/v1/messes/${today}`,
    "https://api.aelf.org/v1/informations/messe",
    "https://api.aelf.org/v1/messes/2024-01-10/france",
  ]

  for (const url of urls) {
    try {
      console.log(`\nüîç Test de: ${url}`)

      const response = await fetch(url, {
        headers: {
          Accept: "application/json",
          "User-Agent": "LuxLectio/1.0",
        },
      })

      console.log(`Status: ${response.status} ${response.statusText}`)
      console.log("Headers:", Object.fromEntries(response.headers.entries()))

      if (response.ok) {
        const data = await response.json()
        console.log("‚úÖ SUCC√àS! Structure des donn√©es:")
        console.log("Cl√©s principales:", Object.keys(data))
        console.log("Donn√©es compl√®tes:", JSON.stringify(data, null, 2))

        // Analysons la structure
        if (data.lectures) {
          console.log("üìñ Lectures trouv√©es:", Object.keys(data.lectures))
        }
        if (data.messe) {
          console.log("‚õ™ Messe:", data.messe)
        }
        if (data.informations) {
          console.log("‚ÑπÔ∏è Informations:", data.informations)
        }

        return data // Retournons les premi√®res donn√©es trouv√©es
      } else {
        const errorText = await response.text()
        console.log("‚ùå Erreur:", errorText)
      }
    } catch (error) {
      console.log("‚ùå Erreur r√©seau:", error.message)
    }
  }

  console.log("\nüîç Aucune URL n'a fonctionn√©. L'API AELF pourrait avoir une structure diff√©rente.")
}

// Ex√©cution du test
testAelfAPI()
